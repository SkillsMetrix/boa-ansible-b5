from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

SQLALCHEMY_DATABASE_URL = "sqlite:///./mytest.db"
 
engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()




----


from sqlalchemy import Column,String

from .database import Base

class Student(Base):
    __tablename__="STUDENT"

    uname=Column(String,primary_key=True)
    email=Column(String)
    city=Column(String)


--------



from fastapi import FastAPI
from . approuting import router
from .database import engine
from . import models

models.Base.metadata.create_all(bind=engine)
  
app = FastAPI()

app.include_router(router)

----



from fastapi import APIRouter,HTTPException,status,Depends
from . import userschema
from sqlalchemy.orm import Session
from random import randrange
from .database import engine,get_db
from . import models
router= APIRouter(tags=["USER Application"])

# dummy user data

usersData=[{'uname':'Sam','email':'sam@mail.com','city':'NY','id':101}]

# search common logic
@router.get('/connect')
def checkConnection(db:Session=Depends(get_db)):
    return{"status":"Connected"}



def searchUser(id):
    for index,data in enumerate(usersData):
        if(data['id'] == id):
            return index
# load the data from server
@router.get('/users/loadusers')
def welcomeUser():
    return {'message':usersData}

# add the data from server
@router.post('/users/adduser')
def adduser(payload: userschema.Users):
    userdata= payload.model_dump()
    userdata['id']=randrange(0,1000)
    usersData.append(userdata)
    return {'message':userdata}

# search the data from server
@router.get("/users/finduser/{id}")
def findUser(id:int):
    serachResult= searchUser(id)
    if serachResult== None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail='OOPS,.... user not found with matching ID')
    return{"result":serachResult}


# remove the data from server
@router.delete("/users/deleteuser/{id}")
def deleteUser(id:int):
    serachResult= searchUser(id)
    if serachResult== None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail='OOPS,.... user not found with matching ID')
    usersData.pop(serachResult)
    return{"result":'user deleted'}

# update the data from server
@router.put("/users/updateuser/{id}")
def updateUser(id:int,payload: userschema.Users):
    serachResult= searchUser(id)
    if serachResult== None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,detail='OOPS,.... user not found with matching ID')
    
    myuser=payload.model_dump()
    myuser['id']=id
    usersData[serachResult]=myuser

    return{"result":'user updated'}




